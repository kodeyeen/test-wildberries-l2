package builder

import "fmt"

/*
Строитель — это порождающий паттерн проектирования, который позволяет создавать сложные объекты пошагово.
Строитель даёт возможность использовать один и тот же код строительства для получения разных представлений объектов.

Применимость:
1. Когда хотим избавиться от конструктора с множеством параметров
Паттерн Строитель позволяет собирать объекты пошагово, вызывая только те шаги, которые вам нужны.
А значит, больше не нужно пытаться «запихнуть» в конструктор все возможные опции продукта.
2. Когда код должен создавать разные представления какого-то объекта.
Например, деревянные и железобетонные дома.
Строитель можно применить, если создание нескольких представлений объекта состоит из одинаковых этапов, которые отличаются в деталях.
Интерфейс строителей определит все возможные этапы конструирования.
Каждому представлению будет соответствовать собственный класс-строитель.
А порядок этапов строительства будет задавать класс-директор.
3. Когда нужно собирать сложные составные объекты, например, деревья Компоновщика.
Строитель конструирует объекты пошагово, а не за один проход.
Более того, шаги строительства можно выполнять рекурсивно.
А без этого не построить древовидную структуру, вроде Компоновщика.
Строитель не позволяет посторонним объектам иметь доступ к конструируемому объекту,
пока тот не будет полностью готов. Это предохраняет клиентский код от получения незаконченных «битых» объектов.

Плюсы:
1. Позволяет создавать продукты пошагово.
2. Позволяет использовать один и тот же код для создания различных продуктов.
3. Изолирует сложный код сборки продукта от его основной бизнес-логики.

Минусы:
1. Усложняет код программы из-за введения дополнительных классов.
2. Клиент будет привязан к конкретным классам строителей,
так как в интерфейсе директора может не быть метода получения результата.

Пример:
Паттерн Строитель также используется, когда нужный продукт сложный и требует нескольких шагов для построения.
В таких случаях несколько конструкторных методов подойдут лучше, чем один громадный конструктор.
При использовании пошагового построения объектов потенциальной проблемой является
выдача клиенту частично построенного нестабильного продукта.
Паттерн "Строитель" скрывает объект до тех пор, пока он не построен до конца.
Нижеприведенный код использует разные типы домов (igloo и normalHouse),
которые конструируются с помощью строителей iglooBuilder и normalBuilder.
При создании каждого дома используются одинаковые шаги.
Для помощи в организации процесса можно использовать директор, хоть это и необязательно.
*/

func main() {
	normalBuilder := getBuilder("normal")
	iglooBuilder := getBuilder("igloo")

	director := newDirector(normalBuilder)
	normalHouse := director.buildHouse()

	fmt.Printf("Normal House Door Type: %s\n", normalHouse.doorType)
	fmt.Printf("Normal House Window Type: %s\n", normalHouse.windowType)
	fmt.Printf("Normal House Num Floor: %d\n", normalHouse.floor)

	director.setBuilder(iglooBuilder)
	iglooHouse := director.buildHouse()

	fmt.Printf("\nIgloo House Door Type: %s\n", iglooHouse.doorType)
	fmt.Printf("Igloo House Window Type: %s\n", iglooHouse.windowType)
	fmt.Printf("Igloo House Num Floor: %d\n", iglooHouse.floor)
}
