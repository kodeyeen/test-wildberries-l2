package visitor

import "fmt"

/*
Посетитель — это поведенческий паттерн проектирования,
который позволяет добавлять в программу новые операции, не изменяя классы объектов,
над которыми эти операции могут выполняться.
Паттерн Посетитель предлагает разместить новое поведение в отдельном классе,
вместо того чтобы множить его сразу в нескольких классах. Объекты, с которыми должно было быть связано поведение,
не будут выполнять его самостоятельно. Вместо этого мы будем передавать эти объекты в методы посетителя.

Применимость:
1. Когда нужно выполнить какую-то операцию над всеми элементами сложной структуры объектов, например, деревом.
Посетитель позволяет применять одну и ту же операцию к объектам различных классов.
2. Когда над объектами сложной структуры объектов надо выполнять некоторые не связанные между собой операции,
но мы не хотим «засорять» классы такими операциями.
3. Посетитель позволяет извлечь родственные операции из классов, составляющих структуру объектов,
поместив их в один класс-посетитель. Если структура объектов является общей для нескольких приложений,
то паттерн позволит в каждое приложение включить только нужные операции.
4. Когда новое поведение имеет смысл только для некоторых классов из существующей иерархии.
Посетитель позволяет определить поведение только для этих классов, оставив его пустым для всех остальных.

Плюсы:
1. Упрощает добавление операций, работающих со сложными структурами объектов.
2. Объединяет родственные операции в одном классе.
3. Посетитель может накапливать состояние при обходе структуры элементов.

Минусы:
1. Паттерн не оправдан, если иерархия элементов часто меняется.
2. Может привести к нарушению инкапсуляции элементов.

Пример:
У нас есть группа объектов объединенных интерфейсом Shape
Мы не хотим "засорять" реализации этих объектов новыми методами и хотим придержаться принципа Open-Closed
Поэтому создаем 2 отдельных класса посетителей
В кажом классе реализуем нужные нам методы для всех типов элементов
Например, один класс отвечает за высчитывание площади элементов, а второй за высчитывание центра фигур.
*/

func main() {
	// создаем сами элементы
	square := &Square{side: 2}
	circle := &Circle{radius: 3}
	rectangle := &Rectangle{l: 2, b: 3}

	// создаем посетителя
	areaCalculator := &AreaCalculator{}

	// посетитель "посещает" каждый элемент
	// далее он предоставляет им свои методы, каждый выбирает нужный себе метод
	square.accept(areaCalculator)
	circle.accept(areaCalculator)
	rectangle.accept(areaCalculator)

	fmt.Println()

	// еще один посетитель
	middleCoordinates := &MiddleCoordinates{}
	square.accept(middleCoordinates)
	circle.accept(middleCoordinates)
	rectangle.accept(middleCoordinates)
}
