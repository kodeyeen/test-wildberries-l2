package facade

// это как бы внешний пакет
import "github.com/kodeyeen/test-wildberries-l2/pattern/01_facade/yookassa"

/*
Фасад — это структурный паттерн проектирования,
который предоставляет простой интерфейс к сложной системе классов, библиотеке или фреймворку.
Иногда приходится работать с большим количеством объектов некой сложной библиотеки или фреймворка.
Мы должны самостоятельно инициализировать эти объекты, следить за правильным порядком зависимостей и так далее.
В результате бизнес-логика наших классов тесно переплетается с деталями реализации сторонних классов.
Такой код довольно сложно понимать и поддерживать.
Фасад — это простой интерфейс для работы со сложной подсистемой, содержащей множество классов.
Фасад может иметь урезанный интерфейс, не имеющий 100% функциональности, которой можно достичь,
используя сложную подсистему напрямую. Но он предоставляет именно те фичи, которые нужны клиенту, и скрывает все остальные.
Фасад полезен, если мы используем какую-то сложную библиотеку со множеством подвижных частей,
но нам нужна только часть её возможностей.

Применимость:
1. Когда нам нужно представить простой или урезанный интерфейс к сложной подсистеме.
2. Когда мы хотим разложить подсистему на отдельные слои.

Плюсы:
1. Изолирует клиентов от компонентов сложной подсистемы.

Минусы:
2. Фасад рискует стать божественным объектом, привязанным ко всем классам программы.

Пример:
YookassaService - это фасад для выдуманного внешнего SDK сервиса ЮКасса
Представим, что этот SDK предоставляет богатый и сложный набор функций и структур,
с которыми трудно работать и из которых даже не все нам нужны.
И в своем коде мы решили, что хотим абстрагироваться от всего этого
и сузить весь функционал к 3 методам, т.о. наш код напрямую не будет использовать библиотеку.
Наш код будет зависить только от этого фасада
Теперь в каком-то другом пакете мы можем объявить интерфейс этого сервиса с 3 методами
и использовать данный фасад.
*/

type YookassaService struct {
	returnUrl string
}

func NewYookassaService(returnUrl string) *YookassaService {
	return &YookassaService{returnUrl}
}

func (ys *YookassaService) CreateAutopayment(amount int, paymentID string) *yookassa.PaymentResponse {
	// проведение автоплатежа в ЮКассе

	return yookassa.Payment()
}

func (ys *YookassaService) CreatePayment(amount int, paymentID string) *yookassa.PaymentResponse {
	// проведение платежа в ЮКассе

	return yookassa.Payment()
}

func (ys *YookassaService) CancelPayment(paymentID string) {
	// отмена платежа
}
