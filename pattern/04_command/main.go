package command

/*
Команда — это поведенческий паттерн проектирования, который превращает запросы в объекты,
позволяя передавать их как аргументы при вызове методов, ставить запросы в очередь,
логировать их, а также поддерживать отмену операций.

Применимость:
1. Когда хотим параметризовать объекты выполняемым действием.
Команда превращает операции в объекты. А объекты можно передавать, хранить и взаимозаменять внутри других объектов.
2. Когда хотим ставить операции в очередь, выполнять их по расписанию или передавать по сети.
Как и любые другие объекты, команды можно сериализовать, то есть превратить в строку,
чтобы потом сохранить в файл или базу данных. Затем в любой удобный момент её можно достать обратно,
снова превратить в объект команды и выполнить. Таким же образом команды можно передавать по сети,
логировать или выполнять на удалённом сервере.
3. Когда нужна операция отмены.
Главная вещь, которая нужна, чтобы иметь возможность отмены операций, — это хранение истории.
Среди многих способов, которыми можно это сделать, паттерн Команда является самым популярным.

Плюсы:
1. Убирает прямую зависимость между объектами, вызывающими операции, и объектами, которые их непосредственно выполняют.
2. Позволяет реализовать простую отмену и повтор операций.
3. Позволяет реализовать отложенный запуск операций.
4. Позволяет собирать сложные команды из простых.
5. Реализует принцип открытости/закрытости.

Минусы:
1. Усложняет код программы из-за введения множества дополнительных классов.

Пример:
Рассмотрим паттерн Команда на примере телевизора. ТV может быть включен двумя способами:

    кнопка ВКЛ на пульте дистанционного управления;
    кнопка ВКЛ на самом телевизоре.

Мы можем начать с реализации объекта команды ВКЛ с телевизором в роли получателя.
Когда на эту команду вызывается метод execute, она, в свою очередь, вызывает функцию TV.on.
Вышеуказанное определяет вызывающий объект. На самом деле мы будем иметь два вызывающих объекта: пульт и сам ТВ.
Оба будут содержать объект команды ВКЛ.

Мы обернули один и тот же запрос в несколько вызывающих объектов.
Это же можно делать и с другими командами. Преимуществом создания отдельных объектов
команд является отделение логики пользовательского интерфейса от внутренней бизнес-логики.
Нет нужды разрабатывать отдельные исполнители для каждого вызывающего объекта – сама команда содержит всю информацию,
необходимую для ее исполнения. Соответственно, ее можно использовать для отсроченного выполнения задачи.

Другие примеры:
Пользователь выбирает, какая кнопка, что делает в интерфейсе какого-то приложения
Шорткаты (горячие клавиши) в программах, изменение их действий, отслеживание истории выполненных команд и возможность их отмены
*/

func main() {
	// клиентский код
	tv := &Tv{}

	onCommand := &TurnOnCommand{
		device: tv,
	}

	offCommand := &TurnOffCommand{
		device: tv,
	}

	turnOnButton := &Button{
		command: onCommand,
	}
	turnOnButton.press()

	turnOffButton := &Button{
		command: offCommand,
	}
	turnOffButton.press()
}
